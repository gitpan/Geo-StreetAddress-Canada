.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Canada 3"
.TH Canada 3 "2013-09-10" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Geo::StreetAddress::Canada \- Perl extension for parsing Canadian street addresses
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&  use Geo::StreetAddress::Canada;
\&
\&  $hashref = Geo::StreetAddress::Canada\->parse_location(
\&                "151 Front Street West, Toronto, Ontario M1M1 M1" );
\&
\&  $hashref = Geo::StreetAddress::Canada\->parse_location(
\&                "Front & York, Toronto, Ontario" );
\&
\&  $hashref = Geo::StreetAddress::Canada\->parse_address(
\&                "151 Front Street West, Toronto, Ontario" );
\&
\&  $hashref = Geo::StreetAddress::Canada\->parse_informal_address(
\&                "Lot 3 York Street" );
\&
\&  $hashref = Geo::StreetAddress::Canada\->parse_intersection(
\&                "Spadina Avenue at Bremner Boulevard, Toronto, Ontario" );
\&
\&  $hashref = Geo::StreetAddress::Canada\->normalize_address( \e%spec );
\&      # the parse_* methods call this automatically...
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Geo::StreetAddress::Canada is a regex-based street address and street intersection
parser for Canada. Its basic goal is to be as forgiving as possible
when parsing user-provided address strings. Geo::StreetAddress::Canada knows about
directional prefixes and suffixes, fractional building numbers, building units,
grid-based addresses, postal codes, and all of the official Canada Post abbreviations 
for street types, province names and secondary unit designators. Please note that this
extension will only return data in English. If you are looking for French language support,
Please see Geo::StreetAddress::FR. Patches are welcome if someone wishes to combine the two!
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
Most Geo::StreetAddress::Canada methods return a reference to a hash containing
address or intersection information. This \*(L"address specifier\*(R" hash may contain 
any of the following fields for a given address. If a given field is not present 
in the address, the corresponding key will be set to \f(CW\*(C`undef\*(C'\fR in the hash.
.PP
Future versions of this module may add extra fields.
.SH "ADDRESS SPECIFIER"
.IX Header "ADDRESS SPECIFIER"
.SS "number"
.IX Subsection "number"
House or street number.
.SS "prefix"
.IX Subsection "prefix"
Directional prefix for the street, such as N, \s-1NE\s0, E, etc.  A given prefix
should be one to two characters long.
.SS "street"
.IX Subsection "street"
Name of the street, without directional or type qualifiers.
.SS "type"
.IX Subsection "type"
Abbreviated street type, e.g. Rd, St, Ave, etc. See the Canada Post Addressing Guidelines
at <http://www.canadapost.ca/tools/pg/manual/PGaddress\-e.asp#1423617> for a list of abbreviations used.
.SS "suffix"
.IX Subsection "suffix"
Directional suffix for the street, as above.
.SS "city"
.IX Subsection "city"
Name of the city, town, or other locale that the address is situated in.
.SS "province"
.IX Subsection "province"
The province which the address is situated in, given as its two-letter
postal abbreviation.  for a list of abbreviations used.
.SS "postalcode"
.IX Subsection "postalcode"
Postal code for the address, with a space separating the \s-1FSA\s0 and \s-1LDU\s0. \s-1IE:\s0 M1M 1M1.
.SS "sec_unit_type"
.IX Subsection "sec_unit_type"
If the address includes a Secondary Unit Designator, such as a room, suite or
appartment, the \f(CW\*(C`sec_unit_type\*(C'\fR field will indicate the type of unit.
.SS "sec_unit_num"
.IX Subsection "sec_unit_num"
If the address includes a Secondary Unit Designator, such as a room, suite or apartment,
the \f(CW\*(C`sec_unit_num\*(C'\fR field will indicate the number of the unit (which may not be numeric).
.SH "INTERSECTION SPECIFIER"
.IX Header "INTERSECTION SPECIFIER"
.SS "prefix1, prefix2"
.IX Subsection "prefix1, prefix2"
Directional prefixes for the streets in question.
.SS "street1, street2"
.IX Subsection "street1, street2"
Names of the streets in question.
.SS "type1, type2"
.IX Subsection "type1, type2"
Street types for the streets in question.
.SS "suffix1, suffix2"
.IX Subsection "suffix1, suffix2"
Directional suffixes for the streets in question.
.SS "city"
.IX Subsection "city"
City or locale containing the intersection, as above.
.SS "province"
.IX Subsection "province"
Province abbreviation, as above.
.SS "postalcode"
.IX Subsection "postalcode"
Postal code for address, as above.
.SH "GLOBAL VARIABLES"
.IX Header "GLOBAL VARIABLES"
Geo::StreetAddress::Canada contains a number of global variables which it
uses to recognize different bits of Canadian street addresses. Although you
will probably not need them, they are documented here for completeness's
sake.
.ie n .SS "%Directional"
.el .SS "\f(CW%Directional\fP"
.IX Subsection "%Directional"
Maps directional names (north, northeast, etc.) to abbreviations (N, \s-1NE\s0, etc.).
.ie n .SS "%Direction_Code"
.el .SS "\f(CW%Direction_Code\fP"
.IX Subsection "%Direction_Code"
Maps directional abbreviations to directional names.
.ie n .SS "%Street_Type"
.el .SS "\f(CW%Street_Type\fP"
.IX Subsection "%Street_Type"
Maps English lowercase Canada Post standard street types to their canonical postal
abbreviations.
.ie n .SS "%Province_Code"
.el .SS "\f(CW%Province_Code\fP"
.IX Subsection "%Province_Code"
Maps lowercased Canadian Province or territory names to their canonical two-letter
postal abbreviations.
.ie n .SS "%Addr_Match"
.el .SS "\f(CW%Addr_Match\fP"
.IX Subsection "%Addr_Match"
A hash of compiled regular expressions corresponding to different
types of address or address portions. Defined regexen include
type, number, fraction, state, direct(ion), dircode, zip, corner,
street, place, address, and intersection.
.PP
Direct use of these patterns is not recommended because they may change in
subtle ways between releases.
.SH "CLASS ACCESSORS"
.IX Header "CLASS ACCESSORS"
.SS "avoid_redundant_street_type"
.IX Subsection "avoid_redundant_street_type"
If true then \*(L"normalize_address\*(R" will set the \f(CW\*(C`type\*(C'\fR field to undef
if the \f(CW\*(C`street\*(C'\fR field contains a word that corresponds to the \f(CW\*(C`type\*(C'\fR in \e%Street_Type.
.PP
For example, given \*(L"4321 Country Road 7\*(R", \f(CW\*(C`street\*(C'\fR will be \*(L"Country Road 7\*(R"
and \f(CW\*(C`type\*(C'\fR will be \*(L"Rd\*(R". With avoid_redundant_street_type set true, \f(CW\*(C`type\*(C'\fR
will be undef because \f(CW\*(C`street\*(C'\fR matches /\eb (rd|road) \eb/ix;
.PP
Also applies to \f(CW\*(C`type1\*(C'\fR for \f(CW\*(C`street1\*(C'\fR and \f(CW\*(C`type2\*(C'\fR for \f(CW\*(C`street2\*(C'\fR
fields for intersections.
.PP
The default is false, for backwards compatibility.
.SH "CLASS METHODS"
.IX Header "CLASS METHODS"
.SS "init"
.IX Subsection "init"
.Vb 4
\&    # Add another street type mapping:
\&    $Geo::StreetAddress::Canada::Street_Type{\*(Aqcur\*(Aq}=\*(Aqcurv\*(Aq;
\&    # Re\-initialize to pick up the change
\&    Geo::StreetAddress::Canada::init();
.Ve
.PP
Runs the setup on globals.  This is run automatically when the module is loaded,
but if you subsequently change the globals, you should run it again.
.SS "parse_location"
.IX Subsection "parse_location"
.Vb 1
\&    $spec = Geo::StreetAddress::Canada\->parse_location( $string )
.Ve
.PP
Parses any address or intersection string and returns the appropriate
specifier. If \f(CW$string\fR matches the \f(CW$Addr_Match\fR{corner} pattern then
\&\fIparse_intersection()\fR is used.  Else \fIparse_address()\fR is called and if that
returns false then \fIparse_informal_address()\fR is called.
.SS "parse_address"
.IX Subsection "parse_address"
.Vb 1
\&    $spec = Geo::StreetAddress::Canada\->parse_address( $address_string )
.Ve
.PP
Parses a street address into an address specifier using the \f(CW$Addr_Match\fR{address}
pattern. Returning undef if the address cannot be parsed as a complete formal
address.
.PP
You may want to use \fIparse_location()\fR instead.
.SS "parse_informal_address"
.IX Subsection "parse_informal_address"
.Vb 1
\&    $spec = Geo::StreetAddress::Canada\->parse_informal_address( $address_string )
.Ve
.PP
Acts like \fIparse_address()\fR except that it handles a wider range of address
formats because it uses the \*(L"informal_address\*(R" pattern. That means a
unit can come first, a street number is optional, and the city and state aren't
needed. Which means that informal addresses like \*(L"#42 123 Main St\*(R" can be parsed.
.PP
Returns undef if the address cannot be parsed.
.PP
You may want to use \fIparse_location()\fR instead.
.SS "parse_intersection"
.IX Subsection "parse_intersection"
.Vb 1
\&    $spec = Geo::StreetAddress::Canada\->parse_intersection( $intersection_string )
.Ve
.PP
Parses an intersection string into an intersection specifier, returning
undef if the address cannot be parsed. You probably want to use
\&\fIparse_location()\fR instead.
.SS "normalize_address"
.IX Subsection "normalize_address"
.Vb 1
\&    $spec = Geo::StreetAddress::Canada\->normalize_address( $spec )
.Ve
.PP
Takes an address or intersection specifier, and normalizes its components,
stripping out all leading and trailing whitespace and punctuation, and
substituting official abbreviations for prefix, suffix, type, and state values.
Also, city names that are prefixed with a directional abbreviation (e.g. N, \s-1NE\s0,
etc.) have the abbreviation expanded.  The original specifier ref is returned.
.PP
Typically, you won't need to use this method, as the \f(CW\*(C`parse_*()\*(C'\fR methods
call it for you.
.SH "BUGS, CAVEATS, MISCELLANY"
.IX Header "BUGS, CAVEATS, MISCELLANY"
Geo::StreetAddress::Canada might not correctly parse house numbers that contain
hyphens.
.PP
This software was originally part of Geo::StreetAddress::US (q.v.) but was split apart
into an independent module for your convenience. Therefore it has some
behaviors which were designed for Geo::StreetAddress::US, but which may not be right
for your purposes. If this turns out to be the case, please let me know.
.PP
Geo::StreetAddress::Canada does \fB\s-1NOT\s0\fR perform Canada Post certified address normalization.
.PP
\&\fBFrench addresses are not supported. This extension will only output data in English.\fR
If you require support for French addresses, please see Geo::StreetAddress::FR. Patches are welcome 
to combine the two!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
This software was originally part of \fIGeo::StreetAddress::US\fR\|(3pm).
.PP
\&\fILingua::EN::AddressParse\fR\|(3pm) and \fIGeo::PostalAddress\fR\|(3pm) both do something
very similar to Geo::StreetAddress::Canada, but are either too strict/limited in
their address parsing, or not really specific enough in how they break down
addresses (for my purposes).
.PP
Canada Post Addressing Guidelines: <http://www.canadapost.ca/tools/pg/manual/PGaddress\-e.asp>
.SH "APPRECIATION"
.IX Header "APPRECIATION"
Thanks to Schuyler D. Erle <schuyler@geocoder.us>, the author of Geo::StreetAddress:US, for providing a very 
solid base upon which to build an extension tailored for Canadian use.
.SH "AUTHOR"
.IX Header "AUTHOR"
Scott Burlovich <lt>teedot@gmail.com>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2013 by Scott Burlovich.
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.4 or,
at your option, any later version of Perl 5 you may have available.
